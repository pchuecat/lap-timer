#include <TinyGPS++.h>
#include <HardwareSerial.h>

TinyGPSPlus gps;

// Use hardware serial 2 on ESP32. For ESP8266, use SoftwareSerial instead.
#define GPS_RX 16 // Connect to TX of GPS
#define GPS_TX 17 // Not used, unless sending commands

HardwareSerial gpsSerial(2); // UART2 on ESP32

void setup()
{
  Serial.begin(115200);
  gpsSerial.begin(115200, SERIAL_8N1, GPS_RX, GPS_TX);
  Serial.println("Waiting for GPS signal...");
}

static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (gpsSerial.available())
      gps.encode(gpsSerial.read());
  } while (millis() - start < ms);
}

static void printFloat(float val, bool valid, int len, int prec)
{
  if (!valid)
  {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  }
  else
  {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1); // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3 : vi >= 10 ? 2 : 1;
    for (int i=flen; i<len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}

void loop()
{
  while (gpsSerial.available() > 0)
  {
    gps.encode(gpsSerial.read());
  }

  if (gps.location.isUpdated())
  {
    Serial.println(F("------ GPS INFO ------"));

    Serial.print(F("Time UTC: "));
    if (gps.time.isValid())
    {
      Serial.printf("%02d:%02d:%02d\n", gps.time.hour(), gps.time.minute(), gps.time.second());
    }
    else
    {
      Serial.println(F("Invalid"));
    }

    Serial.print(F("Date: "));
    if (gps.date.isValid())
    {
      Serial.printf("%02d/%02d/%d\n", gps.date.day(), gps.date.month(), gps.date.year());
    }
    else
    {
      Serial.println(F("Invalid"));
    }

    Serial.print(F("Lat: "));
    Serial.println(gps.location.lat(), 6);
    Serial.print(F("Lng: "));
    Serial.println(gps.location.lng(), 6);

    Serial.print(F("Satellites used: "));
    Serial.println(gps.satellites.value());

    Serial.print(F("Altitude: "));
    Serial.print(gps.altitude.meters());
    Serial.println(F(" m"));

    Serial.print(F("Speed: "));
    Serial.print(gps.speed.kmph());
    Serial.println(F(" km/h"));

    Serial.print(F("HDOP (precision): "));
    // Serial.println(gps.hdop.value() / 10.0); // e.g., 0.9 means good
    printFloat(gps.hdop.hdop(), gps.hdop.isValid(), 6, 1);

    Serial.println();
  }
}
